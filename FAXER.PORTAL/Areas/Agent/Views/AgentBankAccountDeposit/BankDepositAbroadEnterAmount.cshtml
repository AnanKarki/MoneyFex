@model FAXER.PORTAL.Areas.Agent.Models.BankDepositAbroadEnterAmountVM
@{
    ViewBag.Title = "CashPickUpEnterAmount";
    Layout = "/Areas/Agent/Views/Shared/_New_Agent_Layout.cshtml";


    var ReceivingCountries = new List<FAXER.PORTAL.Models.CountryViewModel>(ViewBag.ReceivingCountries);
}

@using (Html.BeginForm("BankDepositAbroadEnterAmount", "AgentBankAccountDeposit", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <div class="real_form pattern2 pdt40 ">
        <div class="container">

            <div class="row">

                @Html.HiddenFor(x => x.SendingCurrency)
                @Html.HiddenFor(x => x.SendingCurrencySymbol)
                @Html.HiddenFor(x => x.ReceivingCurrency)
                @Html.HiddenFor(x => x.ReceivingCurrencySymbol)
                @Html.HiddenFor(x => x.ImageUrl)
                @Html.HiddenFor(x => x.TotalAmount)
                @Html.HiddenFor(x => x.ReceiverName)
                @Html.HiddenFor(x => x.Fee)
                @Html.HiddenFor(x => x.AgentCommission)
                @*@Html.HiddenFor(x => x.ReceivingCountry)*@
                @Html.HiddenFor(x => x.ExchangeRate)

                <div class="col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3 ">

                    <div class="login_signup mb50 clearfix text-center">
                        @Html.ValidationMessage("Insufficientfund", "", new { @class = "text-danger" })

                        @*<div class="flex-container amount-group flex-middle">
                                <div>
                                    <div class="userimage  ">
                                        <img src="~/Content/Images/user.svg" alt="">
                                    </div>
                                </div>

                                @Html.HiddenFor(x => x.SendingCurrencyCode)
                                @Html.HiddenFor(x => x.SendingCurrencySymbol)
                                @Html.HiddenFor(x => x.ReceivingCurrencyCode)
                                @Html.HiddenFor(x => x.ReceivingCurrencySymbol)
                                @Html.HiddenFor(x => x.ImageUrl)
                                @Html.HiddenFor(x => x.TotalAmount)
                                @Html.HiddenFor(x => x.ReceiverName)
                                @Html.HiddenFor(x => x.Fee)
                                @Html.HiddenFor(x => x.AgentCommission)

                                @Html.HiddenFor(x => x.ExchangeRate)

                                <div>
                                    <span class="font-30 text-primary"> @Model.ReceiverName</span>
                                </div>
                            </div>*@

                        @*<div class="amount-group mb5  row ">

                                <div class="col-lg-5">
                                    <label>Sending Amount</label>
                                    @Html.TextBoxFor(x => x.SendingAmount, new { @class = "amount", @placeholder = Model.SendingCurrencySymbol + "0.00", @type = "number", id = "SendingAmount", @onKeyUp = "GetPaymentSummary(false)", @step = ".01" })
                                    @Html.ValidationMessageFor(model => model.SendingAmount, "", new { @class = "text-danger" })
                                    <div class="gbpusd">
                                        @Model.SendingCurrencyCode
                                    </div>
                                </div>
                                <div class="col-lg-2">
                                    <span class="text-primary font-20">OR</span>
                                </div>
                                <div class="col-lg-5">
                                    <label>Receiving Amount</label>
                                    @Html.TextBoxFor(x => x.ReceivingAmount, new { @class = "amount", @placeholder = Model.ReceivingCurrencySymbol + "0.00", @type = "number", id = "ReceivingAmount", @onKeyUp = "GetPaymentSummary(true)", @step = ".01" })
                                    @Html.ValidationMessageFor(model => model.ReceivingAmount, "", new { @class = "text-danger" })
                                    <div class="gbpusd">
                                        @Model.ReceivingCurrencyCode
                                    </div>
                                </div>
                            </div>*@



                        <div class="pinside20">

                            <div class="exchange-rate-wraper-new">
                                <h2>
                                    1&nbsp;
                                    <span data-outbound-currency="GBP" name="SendingCurrency">

                                    </span>&nbsp;=&nbsp;
                                    <span name="ExchangeRate">

                                    </span>&nbsp;
                                    <span class="exchange-rate" data-inbound-currency="GHS" name="ReceivingCurrency">

                                    </span>
                                </h2>
                            </div>

                        </div>

                        <div class="pinside20">

                            <!--  -->
                            <div class="mf-form-calculator">
                                <span class="mf-calculator-label">You send  </span>
                                <input type="number" id="SendingAmount" class="primary-placeholder" required placeholder="0.00" name="SendingAmount" onkeyup="GetPaymentSummary(false)" step="any">
                                <div class="mf-currency text-right dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="true">
                                    <span class="mf-currency-select" data-currency="GBP" id="SendingCountry">GBP&nbsp;&nbsp; from United Kingdom</span>
                                    <div class="arrow-wrapper"><span class="select-arrow"></span></div>
                                </div>
                                <!--  -->
                                <!--  -->


                            </div>
                            <!--  -->
                            <!--  -->
                            <div class="mf-form-calculator">
                                <span class="mf-calculator-label">They receive</span>
                                <input type="number" class=" primary-placeholder" id="ReceivingAmount" placeholder="0.00" name="ReceivingAmount" onkeyup="GetPaymentSummary(true)" step="any">


                                <div class="mf-currency text-right dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="true">
                                    <span class="mf-currency-select" data-currency="GBP" id="ReceivingCountry">NGN &nbsp;&nbsp;Nigeria</span>
                                    <div class="arrow-wrapper"><span class="select-arrow"></span></div>
                                </div>
                                <!--  -->


                                <div class="currency-dropdown dropdown-menu" aria-labelledby=" dropdown-toggle" id="receivingCountryList">
                                    <div class="currency-search">
                                        <div class="search-input">
                                            <input type="search" name="" class=" input-currency-search" id="searchcurency1" placeholder="Type a currency / country">
                                        </div>
                                        <div class="clearfix"></div>
                                    </div>
                                    <ul id="currencylist1">
                                        @foreach (var item in ReceivingCountries)
                                        {

                                            <li class="currency-dropdown_option" onclick="OnReceivingCountryChange('@item.CountryCode', '@item.Currency')">
                                                <div class="currency-dropdown_option_flag flag-icon   flag-icon-@item.CountryCode.ToLower()"></div>
                                                <span class="currency-dropdown_option_text">@item.Currency&nbsp;&nbsp;@item.CountryName</span>
                                            </li>
                                        }
                                        @*<li class="currency-dropdown_option" id="GB" onclick="OnReceivingCountryChange('GB')">
                                                <div class="currency-dropdown_option_flag flag-icon   flag-icon-gb"></div>
                                                <span class="currency-dropdown_option_text">GBP&nbsp;&nbsp; United Kingdom</span>
                                            </li>
                                            <li class="currency-dropdown_option" id="BE" onclick="OnReceivingCountryChange('BE')">
                                                <div class="currency-dropdown_option_flag flag-icon   flag-icon-be"></div>
                                                <span class="currency-dropdown_option_text">EUR&nbsp;&nbsp; Belgium</span>
                                            </li>
                                            <li class="currency-dropdown_option" id="DE" onclick="OnReceivingCountryChange('DE')">
                                                <div class="currency-dropdown_option_flag flag-icon   flag-icon-de"></div>
                                                <span class="currency-dropdown_option_text">EUR&nbsp;&nbsp; Germany</span>
                                            </li>
                                            <li class="currency-dropdown_option " id="NG" onclick="OnReceivingCountryChange('NG')">
                                                <div class="currency-dropdown_option_flag flag-icon flag-icon-ng "></div>
                                                <span class="currency-dropdown_option_text">NGN&nbsp;&nbsp; Nigeria</span>
                                            </li>

                                            <li class="currency-dropdown_option " id="CM" onclick="OnReceivingCountryChange('CM')">
                                                <div class="currency-dropdown_option_flag flag-icon flag-icon-cm "></div>
                                                <span class="currency-dropdown_option_text">XAF&nbsp;&nbsp; Cameroon</span>
                                            </li>
                                            <li class="currency-dropdown_option " id="GH" onclick="OnReceivingCountryChange('GH')">
                                                <div class="currency-dropdown_option_flag flag-icon flag-icon-gh "></div>
                                                <span class="currency-dropdown_option_text">GHS&nbsp;&nbsp; Ghana</span>
                                            </li>
                                            <li class="currency-dropdown_option " id="UG" onclick="OnReceivingCountryChange('UG')">
                                                <div class="currency-dropdown_option_flag flag-icon flag-icon-ug "></div>
                                                <span class="currency-dropdown_option_text">UGX&nbsp;&nbsp; Uganda</span>
                                            </li>*@
                                    </ul>
                                </div>
                                <!--  -->
                            </div>
                            <!--  -->

                        </div>


                        <div class="pinside20">

                            <div class="estimate-calculator" style="">
                                <div class="wrapper">

                                    <dl>
                                        <dt>Fee</dt>
                                        <dd class="fee" id="Fee" data-outbound-currency="USD"><span name="SendingCurrencySymbol"> @Model.SendingCurrencySymbol</span><span name="Fee">@Model.Fee</span></dd>
                                    </dl>
                                    <dl>
                                        <dt>You pay</dt>
                                        <dd class="fee" data-outbound-currency="USD" id="TotalAmount"> <span name="SendingCurrencySymbol">@Model.SendingCurrencySymbol </span><span name="TotalAmount">@Model.TotalAmount</span></dd>
                                    </dl>
                                    <dl>
                                        <dt>They receive</dt>
                                        <dd class="fee" data-outbound-currency="USD"> <span name="ReceivingAmount">@Model.ReceivingAmount</span> <span name="ReceivingCurrency">@Model.ReceivingCurrency </span></dd>
                                    </dl>
                                    <div class="clearfix">

                                    </div>
                                </div>

                            </div>
                        </div>

                        <div class="clearfix"></div>
                        <div class="pinside20">
                            <div class="estimate-calculator">
                                <div class="wrapper">
                                    <dl>
                                        <dt>Agent Commission for this transaction</dt>
                                        <dd class="fee text-secondary" data-outbound-currency="USD"><span name="SendingCurrencySymbol">@Model.SendingCurrencySymbol</span><span name="AgentCommission">@Model.AgentCommission</span></dd>


                                    </dl>

                                    <div class="clearfix"></div>
                                </div>
                            </div>
                        </div>


                        <div class="form-group text-left">
                            <label>@Html.CheckBoxFor(model => model.IsConfirm) I confirm that the information required to transfer money into this bank account has been fully verified by myself</label>
                            @Html.ValidationMessage("IsConfirm", "", new { @class = "text-danger" })
                        </div>


                    </div>
                    <div class="clearfix"></div>

                    <div class="text-center   clearfix">
                        <hr>

                        <button type="submit" class="btn btn-primary btn-lg  mb30 " id="submit">Continue <i class="fa fa-chevron-right" aria-hidden="true"></i></button>
                        <!-- back btn -->
                        <div class="clearfix ">

                            <center>
                                <a href="@Url.Action("BankAccountDeposit","AgentBankAccountDeposit")" class=" "><i class="fa fa-chevron-left" aria-hidden="true"></i> Go Back </a>
                            </center>
                        </div>
                        <!-- back btn end-->
                    </div>
                </div>

                <!--  -->

            </div>

        </div>
    </div>
}


@section Scripts{

    <script type="text/javascript">

        //$("#submit").click(function () {
        //    debugger;
        //    //$("#loader").show();
        //    $("form").submit();
        //})

        $("#SendingAmount").val('@Model.SendingAmount');
        $("#ReceivingAmount").val('@Model.ReceivingAmount');

        var selectedSendingCountry = "@Model.SendingCountry";
        var selectedReceivingCountry = "@Model.ReceivingCountry";
        var SendingCountry = "@Model.SendingCountry";
        var ReceivingCountry = "@Model.ReceivingCountry";
        var selectedSendingCurrency = "@Model.SendingCurrency";
        var selectedReceivingCurrency = "@Model.ReceivingCurrency";

        if (ReceivingCountry == "") {
            ReceivingCountry = "NG";
            selectedReceivingCountry = ReceivingCountry;
        }

        SetSendingCountryText(selectedSendingCountry);
        function SetSendingCountryText(countrycode) {

            $("#SendingCountry").html(selectedSendingCurrency + " &nbsp;&nbsp; " + countrycode);
            $("#ReceivingCountry").html(selectedReceivingCurrency + " &nbsp;&nbsp; " + selectedReceivingCountry);
            $("#SendingCountry").attr('data-currency', selectedSendingCurrency);
            $("#ReceivingCountry").attr('data-currency', selectedReceivingCurrency);
        }

        GetPaymentSummary(false);
        function OnReceivingCountryChange(val, cur) {
            $("#ReceivingCountry").text($($(event.currentTarget).find('span')[0]).text());
            $("#ReceivingCountry").attr('data-currency', cur);
            selectedReceivingCountry = val;
            $("#SendingAmount").val(1);
            SendingCountry = selectedSendingCountry;
            ReceivingCountry = selectedReceivingCountry;
            GetPaymentSummary(false);
        }

         function OnSendingCountryChange(val) {
            $("#SendingCountry").text($($(event.currentTarget).find('span')[0]).text());
            selectedSendingCountry = val;
            $("#SendingAmount").val(1);
                SendingCountry = selectedSendingCountry;
                ReceivingCountry = selectedReceivingCountry;
                GetPaymentSummary(false);
        }

        function GetPaymentSummary(IsReceivingAmount) {

            var SendingAmount = $("#SendingAmount").val();
            var ReceivingAmount = $("#ReceivingAmount").val();

            SendingCountry = selectedSendingCountry;
            ReceivingCountry = selectedReceivingCountry;
            var SendingCurrency = '@Model.SendingCurrency';
            var ReceivingCurrency = $("#ReceivingCountry").attr('data-currency');

            //var receiverCountry = $("#receivingCountry").val();

            if (SendingAmount == "") {

                SendingAmount = 0;
            }
            if (ReceivingAmount == "") {

                ReceivingAmount = 0;
            }
            var data = {

                SendingAmount: SendingAmount,
                ReceivingAmount: ReceivingAmount,
                SendingCurrency: SendingCurrency,
                ReceivingCurrency: ReceivingCurrency,
                SendingCountry: SendingCountry,
                ReceivingCountry: ReceivingCountry,
                IsReceivingAmount: IsReceivingAmount,
                TransferMethod: 4,
                TransferType: "@ViewBag.TransferType",
                IsAuxAgnet:"@ViewBag.IsAuxAgent",
                AgentId: '@ViewBag.AgentId',
                ForAgent: true
            };
            Riddha.ajax.post("/EstimationSummary/GetTransferSummary", data)
                .done(function (result) {
                    result = result.response;
                    for (var item in result) {
                        var selector = '[name="' + item + '"]';
                        $(selector).val(result[item]);
                        $(selector).text(result[item]);

                    }
                });


            //GetPaymentSummary
            //$.getJSON("/Agent/AgentBankAccountDeposit/GetPaymentSummary?SendingAmount=" + SendingAmount
            //    + "&ReceivingAmount=" + ReceivingAmount + "&IsReceivingAmount=" + IsReceivingAmount + "&receiverCountry=" + ReceivingCountry , function (result) {

            //        for (var item in result) {

            //            var selector = '[name="' + item + '"]';
            //            $(selector).val(result[item]);
            //            $(selector).text(result[item]);
            //        }


            //})



        }


        $("#SendingAmount").focus(function () {

            if ($("#SendingAmount").val() <= 1) {

                $("#SendingAmount").val("");
                $("#ReceivingAmount").val("");
            }


        })

        $("#ReceivingAmount").focus(function () {

            if ($("#SendingAmount").val() <= 1) {

                $("#SendingAmount").val("");
                $("#ReceivingAmount").val("");
            }

        })

    </script>
}

























