//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FAXER.PORTAL.DB
{
    using FAXER.PORTAL.Models;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;

    public partial class FaxingNonCardTransaction
    {
        public int Id { get; set; }
        public string stripe_ChargeId { get; set; }
        [ForeignKey("NonCardReciever")]
        public int NonCardRecieverId { get; set; }
        public int UserId { get; set; }
        public string SendingCountry { get; set; }
        public string ReceivingCountry { get; set; }
        public int RecipientId { get; set; }
        public decimal FaxingAmount { get; set; }
        public decimal FaxingFee { get; set; }
        public decimal ReceivingAmount { get; set; }
        public decimal ExchangeRate { get; set; }
        public decimal TotalAmount { get; set; }
        public string FaxingMethod { get; set; }
        public string MFCN { get; set; }
        //TODO: Add Non Card Receipt Number
        public decimal AgentCommission { get; set; }
        public string TransferReference { get; set; }
        public string TransferZeroSenderId { get; set; }
        public string ReceiptNumber { get; set; }
        public FaxingStatus FaxingStatus { get; set; }
        public System.DateTime TransactionDate { get; set; }
        /// <summary>
        /// Current User type
        /// Faxer, Admin, Agent , Merchant, staff, etc.
        /// if Operating Type is Agent then Faxing Country might get differ from the sender Country 
        /// In that case the faxing Amount Summary will be caculated from the respective faxing  country used by agent to send money from 
        /// </summary>
        public OperatingUserType OperatingUserType { get; set; }
        public SenderPaymentMode SenderPaymentMode { get; set; }
        public string PaymentMethod { get; set; }
        public DateTime? StatusChangedDate { get; set; }
        /// <summary>
        /// If sender Payment mode is moneyfex bank account then admin has to approve it 
        /// </summary>
        public bool IsApprovedByAdmin { get; set; }
        public int? PayingStaffId { get; set; }
        public string AgentStaffName { get; set; }
        public virtual ReceiversDetails NonCardReciever { get; set; }
        public string PaymentReference { get; internal set; }
        public decimal ExtraFee { get; set; }
        public bool IsComplianceNeededForTrans { get; set; }
        public bool IsComplianceApproved { get; set; }
        public int ComplianceApprovedBy { get; set; }
        public DateTime? ComplianceApprovedDate { get; set; }
        public int SenderId { get; set; }
        public decimal Margin { get; set; }
        public decimal MFRate { get; set; }
        public ReasonForTransfer Reason { get; set; }
        public int RecipientIdentityCardId { get; set; }
        public string RecipientIdenityCardNumber { get; set; }
        public Apiservice? Apiservice { get; set; }
        public string SendingCurrency { get; set; }
        public string ReceivingCurrency { get; set; }
        public CardProcessorApi? CardProcessorApi { get; set; }
    }
    public enum FaxingStatus
    {


        [Description("Not Received")]
        NotReceived,
        [Description("Received")]
        Received,
        [Description("Cancelled")]
        Cancel,
        [Description("Refunded")]
        Refund,
        [Description("In Progress")]
        Hold,
        [Description("Completed")]
        Completed,
        [Description("Payment Pending")]
        PaymentPending,
        [Description("In Progress (ID Check)")]
        IdCheckInProgress,
        [Description("In progress")]
        PendingBankdepositConfirmtaion,
        [Description("Refund")]
        FullRefund,
        [Description("Refund")]
        PartailRefund,
        [Description("In progress")]
        Paused,
        [Description("In progress")]
        Failed,
    }

    public enum OperatingUserType
    {
        Sender,
        CardUser,
        BusinessMerchant,
        Agent,
        Admin,
        KiiPayBusiness,
        KiiPayPersonal
    }
}
