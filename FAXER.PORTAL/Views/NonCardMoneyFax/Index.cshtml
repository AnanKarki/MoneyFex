@model FAXER.PORTAL.Models.NonCardMoneyFaxViewModel

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_DashBoardLayout.cshtml";


    var FaxingCurrencySymbol = "";
    var FaxingCurrency = "";
    var ReceivingCurrency = "";
    var ReceivingCurrencySymbol = "";

    if (Model != null)
    {
        FaxingCurrencySymbol = Model.SendingCurrencySymbol ?? "";
        FaxingCurrency = Model.SendingCurrency ?? "";
        ReceivingCurrency = Model.ReceivingCurrency ?? "";
        ReceivingCurrencySymbol = Model.ReceivingCurrencySymbol ?? "";
    }
}

<div class="dynamic_bg_form">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2">

                <h1>Cash to Cash Transfer</h1>

            </div>

        </div>
    </div>
</div>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="real_form">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 col-lg-offset-2">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        <label class="col-lg-5">Receiving Country</label>
                        <div class="col-lg-6">
                            @Html.DropDownListFor(x => x.ReceivingCountry, null, "Select Receiving Country", htmlAttributes: new { @class = "form-control", id = "Country", onchange = "getRecCurrency();" })
                            <br />
                            @Html.ValidationMessage("CountryError", new { @class = "text-danger" })
                        </div>


                    </div>
                    <div class="clearfix"></div>
                    <br>
                    <br>

                    @Html.HiddenFor(model => model.SendingCurrency)
                    @Html.HiddenFor(model => model.SendingCurrencySymbol)
                    @Html.HiddenFor(model => model.ReceivingCurrency)
                    @Html.HiddenFor(model => model.ReceivingCurrencySymbol)

                    <div class="col-lg-5">
                        <label> Sending Amount</label>
                    </div>


                    <div class="col-lg-6">
                        <div class="input-group">
                            <span class="input-group-addon">@FaxingCurrencySymbol</span>
                            @Html.EditorFor(model => model.FaxingAmount, new { htmlAttributes = new { @class = "form-control" , id = "FaxingAmount"  , type="number" } })

                            <span class="input-group-addon">@FaxingCurrency</span>

                        </div>

                    </div>

                    <div class="clearfix"><br></div>

                    <div class="clearfix"></div>
                    <div class="form-group">
                        <center>OR</center>
                    </div>
                    <div class="col-lg-5">
                        <label>Amount to be Received</label>
                    </div>


                    <div class="col-lg-6">
                        <div class="input-group">
                            <span class="input-group-addon">@ReceivingCurrencySymbol</span>
                            @Html.EditorFor(model => model.ReceivingAmount, new { htmlAttributes = new { @class = "form-control", id = "ReceivingAmount", type = "number"} })

                            <span class="input-group-addon">@ReceivingCurrency</span>
                        </div>
                        @Html.ValidationMessage("Error", new { @class = "text-danger" })
                    </div>


                    <div class="clearfix"><br></div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.IncludeFaxingFee, htmlAttributes: new { @class = "col-lg-6" })
                        <div class="col-lg-6">
                            <div class="form-check">@Html.RadioButtonFor(m => m.IncludeFaxingFee, true, new { @checked = true })Yes</div>
                            <div class="form-check">
                                @Html.RadioButtonFor(m => m.IncludeFaxingFee, false, new { @checked = true })No
                            </div>
                        </div>
                    </div>
                    <div class="clearfix"></div>
                    @*<div class="col-lg-12">
                            @Html.ValidationMessage("CardURLError", "", new { @class = "text-danger" })
                            <br />
                            @if (ViewBag.ToUrl != null)
                            {

                                <a href="@Url.Action("Index","UploadIdentificationDocument" , new { ToURL = ViewBag.ToUrl})" class="" style="color:blue">Upload Identication Document here</a>
                            }
                        </div>*@
                    <div class="col-lg-8">
                        @if (TempData["ExchangeRate"] != null)
                        {
                            <label style="color:red">@TempData["ExchangeRate"]</label>
                        }
                    </div>
                </div>


            </div>
        </div>
    </div>
    <div class="dynamic_footer">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 col-lg-offset-2">
                    <a href="@Url.Action("Index","FaxMoney")" class="fbtn btn-back hidden-xs hidden-sm "><i class="fa fa-chevron-left" aria-hidden="true"></i> Back</a>
                    <button value="Next" class="fbtn btn-next" type="submit">Next <i class="fa fa-chevron-right" aria-hidden="true"></i></button>

                    <br />
                    <a href="@Url.Action("Index","FaxMoney")" , class="fbtn btn-back hidden-lg hidden-md"><i class="fa fa-chevron-left" aria-hidden="true"></i> Back</a>
                </div>
            </div>
        </div>
    </div>
}


<div class="modal" id="AlertPopUp" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <h4>MoneyFex</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-lg-3 col-md-3 col-sm-3 col-xs-4">
                        <div class="icon_al">
                            <i class="fa fa-exclamation-triangle" aria-hidden="true"></i>
                        </div>
                    </div>
                    <div class="col-lg-9 col-md-9 col-sm-9 col-xs-8">

                            <p>
                                You are about to make a transfer of over  1000 .<br />
                                To comply with anti-money laundering regulations, MoneyFex is required by law to ask for a copy of
                                "your Photo Identification Document (ID).<br />
                                Please upload a copy of your ID to proceed with this Transaction

                            </p>
                        
                    </div>
                </div>
            </div>
            <div class="modal-footer">

                <a class="btn btn-primary btn-sm" data-toggle="modal" data-target="#UploadIdentificationDocument">Upload Identification Document</a>

                @*<a href="@Url.Action("Index","UploadIdentificationDocument" , new { ToURL = ViewBag.ToUrl})" class="btn btn-primary btn-sm">Upload Identification Document</a>*@
                <button type="button" class="btn btn-danger btn-sm" onclick="CloseModal()">Close</button>
            </div>
        </div>
    </div>
</div>


@section Scripts{


    <script type="text/javascript">

        function UploadIdentificationDocument() {

            debugger;

            $("#UploadIdentificationDocument").show("modal");
        }
        var FaxingAmount = document.getElementById('FaxingAmount'),
            ReceivingAmount = document.getElementById('ReceivingAmount');

        function enableToggle(current, other) {

            other.disabled = current.value.replace(/\s+/, '').length > 0;
        }


        FaxingAmount.onkeyup = function () {
            enableToggle(this, ReceivingAmount);
            document.getElementById("ReceivingAmount").value = "";
        }
        ReceivingAmount.onkeyup = function () {
            enableToggle(this, FaxingAmount);
            document.getElementById("FaxingAmount").value = "";
        }

        function getRecCurrency() {
            var recCountry = $("#Country").val();
            window.location.href = "/NonCardMoneyFax/Index?recCountryCode=" + recCountry;
        }


        function CloseModal() {


            $("#AlertPopUp").modal('hide');
        }
        var val = "@ViewBag.ToUrl";
        if (val == undefined || val == "") {

        } else {

            $("#AlertPopUp").modal('show');

        }
        var disabled = '@TempData["ExchangeRate"]' == 'True';
        $("select ").prop("disabled", disabled);


        $.post("Api/TestApi/Create", data, function (result) {

            alert("hello");
        });
    </script>
}


