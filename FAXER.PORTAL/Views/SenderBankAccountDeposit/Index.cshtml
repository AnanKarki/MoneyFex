@model FAXER.PORTAL.Models.SenderBankAccountDepositVm
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_New_Dashboard_Layout.cshtml";
    string PhoneCode = Model.CountryPhoneCode;
    FAXER.PORTAL.Models.CommonEnterAmountViewModel paymentSummary = FAXER.PORTAL.Common.Common.GetAmountSummarySession();
    decimal val = Math.Round(paymentSummary.SendingAmount, 2);
}
@using (Html.BeginForm())
{
    <div class="real_form pattern2 pdt40 ">
        <div class="container">
            <div class="row">

                <div class="col-lg-4">
                    <div class="login_signup mb20">

                        <ul class="wiz">
                            <li>
                                <div class="wiz-list row">
                                    <div class="col-xs-2">
                                        <div class="icon active">
                                            <i class="fa fa-check"></i>
                                        </div>
                                    </div>

                                    <div class="col-xs-8">
                                        <span class=" "><i class="flag-icon flag-icon-@ViewBag.ReceivingCountry "></i> @ViewBag.ReceivingCountryCurrency @ViewBag.TransferMethod </span>
                                    </div>

                                    <div class="col-xs-2">
                                        <a href="@Url.Action("Index","SenderTransferMoneyNow")">Edit</a>
                                    </div>

                                </div>

                            </li>
                            <li>
                                <div class="wiz-list row">
                                    <div class="col-xs-2">
                                        <div class="icon active">
                                            <i class="fa fa-check"></i>
                                        </div>
                                    </div>

                                    <div class="col-xs-8">
                                        <span class=" "><i class="fa fa-money"></i> Amount @ViewBag.SendingCountryCurrency @ViewBag.SendingAmount </span>
                                    </div>

                                    <div class="col-xs-2">
                                        <a href="@Url.Action("Index","SenderTransferMoneyNow")">Edit</a>

                                    </div>

                                </div>

                            </li>
                            <li>
                                <div class="wiz-list row">
                                    <div class="col-xs-2">
                                        <div class="icon">
                                            <i class="fa fa-user"></i>
                                        </div>
                                    </div>


                                </div>


                            </li>
                            <li>
                                <div class="wiz-list row">
                                    <div class="col-xs-2">
                                        <div class="icon last">
                                            <i class="fa fa-credit-card"></i>
                                        </div>
                                    </div>

                                </div>

                            </li>
                        </ul>
                    </div>
                </div>
                <div class="col-lg-6">
                    @*<div class="col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3 ">*@


                    <div class="login_signup mb50 clearfix text-center">
                        <h3>Bank Account Deposit</h3>
                        <hr>

                        <h5> @Html.ValidationMessage("", new { @class = "text-danger" })</h5>
                        @Html.ValidationMessage("ServiceNotAvialable", "", new { @class = "text-danger" })


                        @Html.HiddenFor(model => model.CountryPhoneCode)
                        @*@Html.HiddenFor(model => model.CountryCode)*@
                        <input type="hidden" name="CountryCode" value="@Model.CountryCode" />

                        <div class="form-group">


                            <div class="col-lg-10 col-xs-8 text-left">
                                <h3 class="mb0"> New recipient</h3>
                                <p>Is this a Business?</p>

                            </div>
                            <div class="col-lg-2 col-xs-4">
                                <label class="switch">
                                    <input type="checkbox" id="IsBusiness" name="IsBusiness" onchange="Filter();">
                                    @*@Html.CheckBoxFor(model => model.IsBusiness)*@
                                    <span class="tgl round">
                                    </span>
                                </label>
                            </div>
                        </div>

                        <div class="clearfix"></div>
                        <div class="form-group mb30" id="Country">

                            @Html.DropDownListFor(model => model.CountryCode, (IEnumerable<SelectListItem>)ViewBag.Countries, "Select Country", new { @class = "form-blue", id = "CountryCode", @onchange = "GetBanks()" })
                            @Html.ValidationMessageFor(model => model.CountryCode, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group mb30">

                            @Html.DropDownListFor(model => model.RecentAccountNumber, (IEnumerable<SelectListItem>)ViewBag.RecentAccountNumbers, "Select Recent Account No.", new { @class = "form-blue", @id = "recentAccountNumber", onchange = "GetBanks()" })
                            @Html.ValidationMessageFor(model => model.RecentAccountNumber, "", new { @class = "text-danger" })

                        </div>
                        <div class="form-group   mb20">
                            @Html.TextBoxFor(x => x.AccountOwnerName, new { @class = "form-blue", @placeholder = "Account owner Name", @onKeyup = "RestrictDoubleSpace()" })
                            @Html.ValidationMessageFor(model => model.AccountOwnerName, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group contact-no-group mb20">
                            <div class="countr-code-lg">
                                @ViewBag.CountryPhoneCode
                                <span id="CountryPhoneCode"> </span>
                            </div>
                            @Html.TextBoxFor(x => x.MobileNumber, new { @class = "form-blue contact-no-lg", @placeholder = "Enter Mobile Number", @type = "number", @id = "MobileNumber" })
                            @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })

                        </div>
                        <div class="form-group mb30" id="emailDiv">
                            @Html.TextBoxFor(x => x.ReceiverEmail, new { @class = "form-blue", @placeholder = "Enter Email Address" })
                            @Html.ValidationMessageFor(model => model.ReceiverEmail, "", new { @class = "text-danger" })
                        </div>

                        @if (Model.IsEuropeTransfer == true)
                        {

                            <div class="form-group   mb20">
                                @Html.TextBoxFor(x => x.BankName, new { @class = "form-blue", @placeholder = "Enter Bank Name" })
                                @Html.ValidationMessageFor(model => model.BankName, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group   mb20">
                                @Html.TextBoxFor(x => x.BranchCode, new { @class = "form-blue", @placeholder = "Enter BIC/SWIFT" })
                                @Html.ValidationMessageFor(model => model.BranchCode, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group mb20">
                                @Html.TextBoxFor(x => x.AccountNumber, new { @class = "form-blue", @placeholder = "Enter IBAN" })
                                @Html.ValidationMessageFor(model => model.AccountNumber, "", new { @class = "text-danger" })

                            </div>
                        }
                        else if (Model.IsWestAfricaTransfer == true)
                        {

                            <div class="form-group mb30" id="dropdown">
                                @Html.DropDownListFor(model => model.BankId, (IEnumerable<SelectListItem>)ViewBag.BankNames,
                               "Select Bank Name", new { @class = "form-blue selectpicker", @id = "BankId", @data_show_subtext = "true", @data_live_search = "true", onchange = "GetBankCode()" })
                                @Html.ValidationMessageFor(model => model.BankId, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group mb20">
                                @Html.TextBoxFor(x => x.AccountNumber, new { @class = "form-blue", @placeholder = "Enter IBAN" })
                                @Html.ValidationMessageFor(model => model.AccountNumber, "", new { @class = "text-danger" })

                            </div>
                        }

                        else if (Model.IsSouthAfricaTransfer == true)
                        {

                            <div class="form-group mb30">

                                @Html.TextBoxFor(x => x.ReceiverStreet, new { @class = "form-blue", @placeholder = "Enter Address" })
                                @Html.ValidationMessageFor(model => model.BranchCode, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group mb30">

                                @Html.TextBoxFor(x => x.ReceiverPostalCode, new { @class = "form-blue", @placeholder = "Enter Postcode" })
                                @Html.ValidationMessageFor(model => model.BranchCode, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group mb30">

                                @Html.TextBoxFor(x => x.ReceiverCity, new { @class = "form-blue", @placeholder = "Enter City" })
                                @Html.ValidationMessageFor(model => model.BranchCode, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group mb30">
                                @Html.TextBoxFor(x => x.ReceiverEmail, new { @class = "form-blue", @placeholder = "Enter Email Address" })
                                @Html.ValidationMessageFor(model => model.ReceiverEmail, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group mb20">
                                @Html.TextBoxFor(x => x.AccountNumber, new { @class = "form-blue", @placeholder = "Enter Account Number" })
                                @Html.ValidationMessageFor(model => model.AccountNumber, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group mb30" id="dropdown">
                                @Html.DropDownListFor(model => model.BankId, (IEnumerable<SelectListItem>)ViewBag.BankNames, "Select Bank Name", new { @class = "form-blue selectpicker", @id = "BankId", @data_show_subtext = "true", @data_live_search = "true", onchange = "GetBankCode()" })
                                @Html.ValidationMessageFor(model => model.BankId, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group mb30">
                                @Html.HiddenFor(x => x.BranchCode, new { @class = "form-blue", @placeholder = "Enter code", @readonly = true, @style = "display:none" })
                                @Html.ValidationMessageFor(model => model.BranchCode, "", new { @class = "text-danger" })
                                @*<p style="font-size:15px"><i> Bank code / branch code / sort code / routing number etc</i> </p>*@
                            </div>
                        }
                        else
                        {

                            <div class="form-group mb30" id="dropdown">
                                @Html.DropDownListFor(model => model.BankId, (IEnumerable<SelectListItem>)ViewBag.BankNames, "Select Bank Name", new { @class = "form-blue selectpicker", @id = "BankId", @data_show_subtext = "true", @data_live_search = "true", onchange = "GetBankCode()" })
                                @Html.ValidationMessageFor(model => model.BankId, "", new { @class = "text-danger" })

                            </div>
                            if (Model.CountryCode == "GH")
                            {
                                <div class="form-group mb30">

                                    @Html.DropDownListFor(model => model.BranchCode, (IEnumerable<SelectListItem>)ViewBag.Branches, "Select Branch", new { @class = "form-blue" })
                                    @Html.ValidationMessageFor(model => model.BranchCode, "", new { @class = "text-danger" })
                                </div>
                            }


                            <div class="form-group mb20">
                                @Html.TextBoxFor(x => x.AccountNumber, new { @class = "form-blue", @placeholder = "Enter Account Number", @type = "number" })
                                @Html.ValidationMessageFor(model => model.AccountNumber, "", new { @class = "text-danger" })
                                @*@Html.ValidationMessage("AccountNumber", new { @class = "text-danger" })*@

                            </div>


                            if (Model.CountryCode != "GH")
                            {
                                <div class="form-group   mb20" style="display:none">


                                    @Html.HiddenFor(x => x.BranchCode, new { @class = "form-blue", @placeholder = "Enter code", @readonly = true, @style = "display:none" })
                                    @Html.ValidationMessageFor(model => model.BranchCode, "", new { @class = "text-danger" })
                                    <p style="font-size:15px"><i> Bank code / branch code / sort code / routing number etc</i> </p>
                                </div>


                            }
                        }

                        <div class="form-group   mb20">
                            @Html.EnumDropDownListFor(x => x.ReasonForTransfer, new { @class = "form-blue" })
                            @Html.ValidationMessageFor(model => model.ReasonForTransfer, "", new { @class = "text-danger" })
                        </div>

                        @*<div class="form-group mb20">
                                <h2 class="text-primary text-center">OR</h2>
                            </div>*@



                        @*<h4 class="text-center mb30">Sending money locally?   <a href="@Url.Action("LocalBankAccountDeposit","SenderBankAccountDeposit")">Change</a></h4>*@

                    </div>
                    <div class="clearfix"></div>


                    <div class="text-center   clearfix">
                        <hr>

                        <a class="btn btn-primary btn-lg " id="submit">Continue <i class="fa fa-chevron-right" aria-hidden="true"></i></a>
                        <div class="clearfix mb30"> </div>
                        <a href="@Url.Action("Index","SenderTransferMoneyNow" ) " class=" "><i class="fa fa-chevron-left" aria-hidden="true"></i> Go Back </a>
                        @*<a href="javascript: history.go(-1)" class=" "><i class="fa fa-chevron-left" aria-hidden="true"></i> Go Back </a>*@
                    </div>
                </div>
                <!--  -->
            </div>
        </div>

    </div>


}
<!--  -->


@section Scripts{

    <script type="text/javascript">


        $("#submit").click(function () {

            $("#loader").show();
            $("form").submit();
        })

        if ($("#CountryCode").val() == 'ZA')
        {
            debugger;
            $("#MobileNumber").attr('placeholder', 'Enter Mobile Number');

        }
        else {
            $("#MobileNumber").attr('placeholder', 'Enter Mobile Number(Optional)');

        }
        Filter();
        function Filter() {
            debugger;
            var isBusiness = $("#IsBusiness")[0].checked;

            if (isBusiness == true) {

                $("#AccountOwnerName").attr('placeholder', 'Business Name');
            }
            else if (isBusiness == false)
            {
                $("#AccountOwnerName").attr('placeholder', 'Recipient Name');

            }

        }

        function GetAccountInformation() {
            var countryCode = $("#CountryCode").val();

            var accountNo = $("#recentAccountNumber").val();

            $.getJSON("/SenderBankAccountDeposit/GetAccountInformation?accountNo=" + accountNo + '&CountryCode=' + countryCode, function (result) {

                for (var item in result) {

                    var selector = '[name="' + item + '"]';
                    $(selector).val(result[item]);
                    $(selector).text(result[item]);
                }

                //debugger;
                $("#BankId").val(result["BankId"]);
                $("#CountryPhoneCode").val(result["CountryPhoneCode"]);
                $("#CountryPhoneCode").text(result["CountryPhoneCode"]);
            })
        }

        function GetBanks() {
            //debugger;
            var countryCode = $("#CountryCode").val();

            var accountNo = $("#recentAccountNumber").val();
            if (countryCode == undefined) {
                countryCode = "";
            }
            window.location.href = "/SenderBankAccountDeposit/Index?Country=" + countryCode + "&RecentAcccountNo=" + accountNo;
        }

        function GetBankCode() {

            var bankId = $("#BankId").val();
            $.getJSON("/SenderBankAccountDeposit/GetBankCode?bankId=" + bankId, function (result) {

                debugger;
                for (var item in result) {
                    var selector = '[name="' + item + '"]';
                    $(selector).val(result[item]);
                    $(selector).text(result[item]);
                }
                if (result.Branches != null) {
                    $("#BranchCode option").remove();
                    $("#BranchCode").append('<option value="">Select Branch</option>');
                    for (var item in result.Branches)
                    {
                        $("#BranchCode ").append('<option value="' + result.Branches[item].Code + '">' + result.Branches[item].Name + '</option>');
                    }

                }
            })

        }
        function GetCountryPhoneCode() {

            var countryCode = $("#CountryCode").val();
            $.getJSON("/SenderBankAccountDeposit/GetCountryPhonCode?CountryCode=" + countryCode, function (result) {


                $("#CountryPhoneCode").text(result.CountryCode)
            })

        }

        $("#Country").hide();
        var countryCode = $("#CountryCode").val();
        if (countryCode != "" || countryCode == undefined) {
            GetCountryPhoneCode();
        }
        var IsTransferFromHomePage = '@FAXER.PORTAL.Common.FaxerSession.IsTransferFromHomePage';
        if (IsTransferFromHomePage == "True") {
            //debugger;
            $("#CountryCode").attr('disabled', "disabled");
        }
        IsCommonEstimationPage = '@FAXER.PORTAL.Common.FaxerSession.IsCommonEstimationPage';
        if (IsCommonEstimationPage == "True") {
            //debugger;
            $("#CountryCode").attr('disabled', "disabled");
        }
        function RestrictDoubleSpace(){

            var ownerName = $("#AccountOwnerName").val();
            var name = ownerName.replace(/\s\s+/g, ' ');
            $("#AccountOwnerName").val(name);
        }
        checkifFlutterWaveApi();
        function checkifFlutterWaveApi() {
            var countryCode = $("#CountryCode").val();
            $.getJSON("/SenderBankAccountDeposit/CheckifFlutterWaveApi?CountryCode=" + countryCode, function (result) {
                if (result == true) {
                    $("#emailDiv").show();
                }
                else {
                    $("#emailDiv").hide();
                }
            })
        }

    </script>
}
