@model FAXER.PORTAL.Models.PaymentUsingSavedCreditDebitCardVm

@{
    ViewBag.Title = "NonCardReceiverTransferUsingSavedCreditDebitCard";
    Layout = "~/Views/Shared/_DashBoardLayout.cshtml";

    var FaxingCurrency = "";
    var FaxingcurrencySymbol = "";
    if (Model != null)
    {

        FaxingCurrency = Model.FaxingCurrency ?? "";
        FaxingcurrencySymbol = Model.FaxingCurrencySymbol ?? "";

        if (Model.CardNumber != null)
        {
            Model.CardNumberMasked = "**** **** **** " + Model.CardNumber.Substring(Model.CardNumber.Length - 4, 4);
        }

    }
}


@using (Html.BeginForm(FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div class="progress">
        <div class="progress-bar  " role="progressbar" aria-valuenow="40"
             aria-valuemin="0" aria-valuemax="100" style="width:28%">

        </div>
        <div class="arrow"></div>
    </div>
    <!--  -->
    <div class="dynamic_bg_form">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 col-lg-offset-2">

                    <h1>Transfer Money using saved Credit/Debit Card</h1>

                </div>

            </div>
        </div>


    </div>
    <!--  -->
    <!--  -->
    <div class="real_form">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 col-lg-offset-2">


                    @Html.HiddenFor(model => model.FaxingCurrencySymbol)
                    @Html.HiddenFor(model => model.FaxingCurrency)

                    <div class="col-lg-5">
                        <label>Sending Amount including Fee</label>
                    </div>


                    <div class="col-lg-6">
                        <div class="input-group">
                            <span class="input-group-addon">@FaxingcurrencySymbol</span>
                            @Html.EditorFor(model => model.TopUpAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                            <span class="input-group-addon">@FaxingCurrency</span>
                            @Html.ValidationMessageFor(model => model.TopUpAmount, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="clearfix"><br></div>
                    <!--  -->
                    <!--  -->
                    <div class="col-lg-5">
                        <label> Select Saved Credit/Debit Card </label>
                    </div>

                    <div class="col-lg-6 ">
                        <div class="form-group">
                            @Html.DropDownListFor(x => x.SavedCard, null, "Select Saved Card", htmlAttributes: new { @class = "form-control", id = "SavedCard", @onchange = "getSavedCard(this.value);" })
                        </div>
                    </div>
                    <div class="clearfix"></div>
                    <!--  -->
                    <!--  -->


                    <div class="col-lg-5">

                    </div>
                    <div class="col-lg-6">
                        <div class="form-group">

                            @Html.ValidationMessage("ErrorMessage", "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="clearfix"></div>
                    <div class="col-lg-5">
                        <label> Name on Card </label>
                    </div>

                    <div class="col-lg-6 ">
                        <div class="form-group">
                            @Html.EditorFor(model => model.NameOnCard, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                            @Html.ValidationMessageFor(model => model.NameOnCard, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="clearfix"></div>
                    <!--  -->
                    <!--  -->
                    <div class="col-lg-5">
                        <label> Card Number</label>
                    </div>

                    <div class="col-lg-6 ">
                        <div class="form-group">
                            @Html.HiddenFor(model => model.CardNumber)
                            @Html.EditorFor(model => model.CardNumberMasked, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                            @Html.ValidationMessageFor(model => model.CardNumber, "", new { @class = "text-danger" })

                        </div>
                    </div>
                    <div class="clearfix"></div>
                    <!--  -->
                    <!--  -->
                    <div class="col-lg-5">
                        <label> End Date</label>
                    </div>

                    <div class="col-lg-3 ">
                        <div class="form-group">
                            @Html.EditorFor(model => model.EndMonth, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                            @Html.ValidationMessageFor(model => model.EndMonth, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-lg-3 ">
                        <div class="form-group">
                            @Html.EditorFor(model => model.EndYear, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                            @Html.ValidationMessageFor(model => model.EndYear, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="clearfix"></div>
                    <!--  -->
                    <!--  -->
                    <div class="col-lg-5">
                        <label>Security Code</label>
                    </div>
                    <div class="col-lg-3 ">
                        <div class="form-group">
                            <input type="text" class="form-control" name="Code" value="..." readonly />
                            @Html.HiddenFor(model => model.SecurityCode)
                            @*@Html.EditorFor(model => model.SecurityCode, new { htmlAttributes = new { @class = "form-control", @readonly = true } })*@
                            @Html.ValidationMessageFor(model => model.SecurityCode, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-lg-3 ">
                        <div class="form-group">
                            <img src="/images/code.png">
                        </div>
                    </div>
                    <div class="clearfix"></div>
                    <!--  -->
                    <hr>
                    <h4>Your home & billing Address: </h4>
                    <p>For security and verification purposes, your home and billing address must be same</p>

                    <!--  -->
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.EditorFor(model => model.Address1, new { htmlAttributes = new { @class = "form-control", placeholder = "Address line 1" } })
                            @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <!--  -->
                    <!--  -->
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.EditorFor(model => model.Address2, new { htmlAttributes = new { @class = "form-control", placeholder = "Address line 2 (optional)" } })
                            @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <!--  -->
                    <!--  -->
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", placeholder = "City" } })
                            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <!--  -->
                    <!--  -->
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.EditorFor(model => model.PostalCode, new { htmlAttributes = new { @class = "form-control", placeholder = "Post/Zip Code" } })
                            @Html.ValidationMessageFor(model => model.PostalCode, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <!--  -->
                    <!--  -->
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.DropDownListFor(model => model.Country, (IEnumerable<SelectListItem>)ViewBag.Countries, "Select Country", new { @class = "form-control" })
                            @*@Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control", placeholder = "Country" } })*@
                            @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <!--  -->
                    <div class="clearfix"></div>
                    @*<div class="col-lg-12">
            <div class="form-group">
                <label>Would you like to auto top-up this MoneyFex Top-up card ?</label>
                <div class="checkbox">
                    <label><input type="checkbox" name="prog" value="Yes"> Yes</label>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="form-group">
                <div id="submit_prog">
                    <h5>Select Top-up Amount</h5>
                    <input list="browsers" name="myBrowser" class="form-control" />
                    <datalist id="browsers">
                        <option value="10">
                        <option value="20">
                        <option value="50">
                        <option value="100">
                        <option value="150">
                        <option value="200">
                    </datalist>
                </div>
            </div>
        </div>*@
                    @*<div class="col-lg-12">
            <p><b>This MoneyFex card will be top-up as soon as the amount available to be withdrawn bt the "Receiver" reaches zero(0). Additionally, the exchange rates and fees at the time will be applied.</b></p>
        </div>*@

                    <div class="col-lg-12">
                        <div class="form-group">
                            <div class="checkbox">
                                <label>@Html.CheckBoxFor(x => x.Confirm) Accept our Terms and Conditions</label>
                                @Html.ValidationMessageFor(model => model.Confirm, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--  -->
    <!--  -->
    <div class="dynamic_footer">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 col-lg-offset-2">
                    <a href="/FaxMoney/ChoosePaymentOption" class="fbtn btn-back hidden-sm hidden-xs"><i class="fa fa-chevron-left" aria-hidden="true"></i> Back</a>
                    <button type="submit" class="fbtn btn-next">Next <i class="fa fa-chevron-right" aria-hidden="true"></i></button>
                    <br>
                    <a href="/FaxMoney/ChoosePaymentOption" class="fbtn btn-back hidden-lg hidden-md"><i class="fa fa-chevron-left" aria-hidden="true"></i> Back</a>
                </div>
            </div>
        </div>
    </div>
}
<script>
    function getSavedCard(val) {
        window.location.href = "/CardPayment/NonCardReceiverTransferUsingSavedCreditDebitCard?savedCardId=" + val;
    }
</script>
